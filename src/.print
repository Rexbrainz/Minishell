
 static void	commands_print(t_command *cmd)
 {
 	int				i;
 	int				j;
 	t_commandlist	*current;

 	current = cmd->head;
 	while (cmd->head)
 	{
 		i = 0;
 		ft_printf("Node type: [%d]\t", cmd->head->type);
 		if (!cmd->head->cmd)
 			ft_printf("PIPELINE SEPARATOR");
 		else
 		{
 			ft_printf("The command and arguments are: ");
 			while (*(cmd->head->cmd))
 				ft_printf("%d. [%s] ", i++, *(cmd->head->cmd)++);
 		}
 		ft_printf("\n");
 		if (cmd->head->files)
 		{
 			j = 0;
 			ft_printf("FILES\n");
 			while (cmd->head->files->head)
 			{
 				ft_printf("FILE[%d]-> %s\n", j++,
 					cmd->head->files->head->filename);
 				cmd->head->files->head = cmd->head->files->head->next;
 			}
 		}
 		current = cmd->head;
 		cmd->head = cmd->head->next;
 		free(current);
 	}
 }

static void	tokens_print(t_tokens *tokens)
{
  	ft_printf("t_input-> [%s]\tLexeme count-> [%d]\n\n",
  		tokens->t_input, tokens->lexeme_count);
  	while (tokens->head)
  	{
  		ft_printf("lexeme-> [%s]\ttype-> [%d]\tS_Pos-> [%d]\tE_Pos-> [%d]\n",
  			tokens->head->lexeme, tokens->head->type, 
			 tokens->head->start_pos, tokens->head->end_pos);
  		tokens->head = tokens->head->next;
	}
}
